#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –±–ª–æ–∫–∞ 02: ImportRaw —Å–æ –≤—Å–µ–º–∏ –±–∏—Ä–∂–∞–º–∏
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'oflow'))

from oflow.blocks import ImportRawBlock
import pandas as pd
import time

def test_block_02_all_exchanges():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–ª–æ–∫ 02 —Å–æ –≤—Å–µ–º–∏ 12 –±–∏—Ä–∂–∞–º–∏"""
    print("üß™ –¢–ï–°–¢ –ë–õ–û–ö–ê 02: ImportRaw —Å–æ –≤—Å–µ–º–∏ –±–∏—Ä–∂–∞–º–∏")
    print("=" * 60)
    
    # –í—Å–µ 12 –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º (6 –±–∏—Ä–∂ x 2 —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö)
    data_paths = [
        # Futures
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/futures/binance_futures/2025-07-23-19-trades.parquet',
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/futures/binance_futures/2025-07-23-19-depth.parquet',
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/futures/bybit/2025-07-23-19-trades.parquet',
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/futures/bybit/2025-07-23-19-depth.parquet',
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/futures/okx/2025-07-23-19-trades.parquet',
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/futures/okx/2025-07-23-19-depth.parquet',
        # Spot
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/spot/binance/2025-07-23-19-trades.parquet',
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/spot/binance/2025-07-23-19-depth.parquet',
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/spot/bybit/2025-07-23-19-trades.parquet',
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/spot/bybit/2025-07-23-19-depth.parquet',
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/spot/okx/2025-07-23-19-trades.parquet',
        'C:/Users/andrei.barysenka/Documents/Trading/CryptoFeed/data/spot/okx/2025-07-23-19-depth.parquet'
    ]
    
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å {len(data_paths)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
    for i, path in enumerate(data_paths, 1):
        print(f"   {i:2d}. {os.path.basename(path)}")
    
    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ 02 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    config = {
        'test_mode': True,
        'output_dir': '../data/normalized'  # –ü—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ src/
    }
    block = ImportRawBlock(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {'data_paths': data_paths}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ 02
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ 02: ImportRaw...")
    start_time = time.time()
    
    try:
        result = block.run(test_data, config)
        execution_time = time.time() - start_time
        
        print(f"‚úÖ –ë–ª–æ–∫ 02 –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥!")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–±–ª–æ–∫ 02 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple)
        if isinstance(result, tuple) and len(result) >= 2:
            trades_df = result[0]
            depth_df = result[1]
        else:
            trades_df = result.get('trades_df') if isinstance(result, dict) else None
            depth_df = result.get('depth_df') if isinstance(result, dict) else None
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò –í–°–ï–• –ë–ò–†–ñ:")
        print(f"   - Trades: {len(trades_df) if trades_df is not None else 0} —Å—Ç—Ä–æ–∫")
        print(f"   - Depth: {len(depth_df) if depth_df is not None else 0} —Å—Ç—Ä–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –±–∏—Ä–∂–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å
        if trades_df is not None and not trades_df.empty:
            exchanges = trades_df['exchange'].unique()
            print(f"   - –ë–∏—Ä–∂–∏ –≤ trades: {exchanges}")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ä–∂: {len(exchanges)}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∏—Ä–∂–∞–º
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–ò–†–ñ–ê–ú:")
            for exchange in exchanges:
                ex_data = trades_df[trades_df['exchange'] == exchange]
                print(f"   - {exchange}: {len(ex_data)} trades")
        
        if depth_df is not None and not depth_df.empty:
            exchanges_depth = depth_df['exchange'].unique()
            print(f"   - –ë–∏—Ä–∂–∏ –≤ depth: {exchanges_depth}")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ä–∂: {len(exchanges_depth)}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∏—Ä–∂–∞–º
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê DEPTH –ü–û –ë–ò–†–ñ–ê–ú:")
            for exchange in exchanges_depth:
                ex_data = depth_df[depth_df['exchange'] == exchange]
                print(f"   - {exchange}: {len(ex_data)} depth records")
        
        print("\n‚úÖ –ë–ª–æ–∫ 02 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —Å–æ –≤—Å–µ–º–∏ –±–∏—Ä–∂–∞–º–∏!")
        return True
        
    except Exception as e:
        execution_time = time.time() - start_time
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 02 –ø–æ—Å–ª–µ {execution_time:.2f} —Å–µ–∫: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_block_02_all_exchanges()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –¢–ï–°–¢ –ë–õ–û–ö–ê 02 –°–û –í–°–ï–ú–ò –ë–ò–†–ñ–ê–ú–ò –ü–†–û–ô–î–ï–ù!")
    else:
        print("‚ùå –¢–ï–°–¢ –ë–õ–û–ö–ê 02 –°–û –í–°–ï–ú–ò –ë–ò–†–ñ–ê–ú–ò –ü–†–û–í–ê–õ–ï–ù!")
    print("=" * 60)
