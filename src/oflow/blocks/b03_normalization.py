"""
–ë–ª–æ–∫ 03: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (Normalization)

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é trades, depth –∏ quotes –¥–∞–Ω–Ω—ã—Ö
–≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import pandas as pd
import logging
from typing import Dict, List, Any, Tuple
try:
    from .base_block import BaseBlock
except ImportError:
    # –î–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    from base_block import BaseBlock

logger = logging.getLogger(__name__)

class NormalizationBlock(BaseBlock):
    """–ë–ª–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, config: Dict):
        super().__init__(config)
        self.name = "NormalizationBlock"
    
    def run(self, data: Dict[str, Any], config: Dict) -> Dict[str, pd.DataFrame]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞
        trades_df = data.get('trades_df')
        depth_df = data.get('depth_df')
        
        if trades_df is not None:
            trades_df = self.normalize_trades(trades_df, config)
        
        if depth_df is not None:
            depth_df = self.normalize_depth(depth_df, config)
        
        result = {
            'trades_df': trades_df,
            'depth_df': depth_df
        }
        
        logger.info("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return result
    
    def normalize_trades(self, trades_df: pd.DataFrame, config: Dict) -> pd.DataFrame:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è trades –¥–∞–Ω–Ω—ã—Ö"""
        if trades_df.empty:
            return trades_df
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        normalized = trades_df.copy()
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞ 02)
        required_columns = ['ts_ns', 'exchange', 'market', 'instrument', 'price', 'size']
        for col in required_columns:
            if col not in normalized.columns:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {col} –≤ trades –¥–∞–Ω–Ω—ã—Ö")
                return pd.DataFrame()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        normalized = normalized.sort_values('ts_ns').reset_index(drop=True)
        
        return normalized
    
    def normalize_depth(self, depth_df: pd.DataFrame, config: Dict) -> pd.DataFrame:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è depth –¥–∞–Ω–Ω—ã—Ö"""
        if depth_df.empty:
            return depth_df
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        normalized = depth_df.copy()
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞ 02)
        required_columns = ['ts_ns', 'exchange', 'market', 'symbol', 'side', 'price', 'size']
        for col in required_columns:
            if col not in normalized.columns:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {col} –≤ depth –¥–∞–Ω–Ω—ã—Ö")
                return pd.DataFrame()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        normalized = normalized.sort_values('ts_ns').reset_index(drop=True)
        
        return normalized
    
    def normalize_quotes(self, quotes_df: pd.DataFrame, config: Dict) -> pd.DataFrame:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è quotes –¥–∞–Ω–Ω—ã—Ö"""
        if quotes_df.empty:
            return quotes_df
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        normalized = quotes_df.copy()
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        required_columns = ['ts_ns', 'exchange', 'symbol', 'best_bid', 'best_ask']
        for col in required_columns:
            if col not in normalized.columns:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {col} –≤ quotes –¥–∞–Ω–Ω—ã—Ö")
                return pd.DataFrame()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        normalized = normalized.sort_values('ts_ns').reset_index(drop=True)
        
        return normalized

def normalize_trades(trades_df: pd.DataFrame, config: Dict) -> pd.DataFrame:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ trades"""
    block = NormalizationBlock(config)
    return block.normalize_trades(trades_df, config)

def normalize_depth(depth_df: pd.DataFrame, config: Dict) -> pd.DataFrame:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ depth"""
    block = NormalizationBlock(config)
    return block.normalize_depth(depth_df, config)

def normalize_quotes(quotes_df: pd.DataFrame, config: Dict) -> pd.DataFrame:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ quotes"""
    block = NormalizationBlock(config)
    return block.normalize_quotes(quotes_df, config)


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ 03 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import pandas as pd
    import logging
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    print("üß™ –¢–ï–°–¢ –ë–õ–û–ö–ê 03: Normalization")
    print("=" * 50)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–ª–æ–∫–∞ 02 (–≤—Å–µ 4 –±–∏—Ä–∂–∏)
        trades_df = pd.read_parquet("../../../data/normalized/trades.parquet")
        depth_df = pd.read_parquet("../../../data/normalized/book_top.parquet")
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤—Å–µ—Ö –±–∏—Ä–∂:")
        if not trades_df.empty:
            exchanges = trades_df['exchange'].unique()
            print(f"   - –ë–∏—Ä–∂–∏ –≤ trades: {exchanges}")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ä–∂: {len(exchanges)}")
        
        if not depth_df.empty:
            exchanges_depth = depth_df['exchange'].unique()
            print(f"   - –ë–∏—Ä–∂–∏ –≤ depth: {exchanges_depth}")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ä–∂: {len(exchanges_depth)}")
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:")
        print(f"   - Trades: {len(trades_df)} —Å—Ç—Ä–æ–∫")
        print(f"   - Depth: {len(depth_df)} —Å—Ç—Ä–æ–∫")
        
        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫
        config = {'test_mode': True}
        block = NormalizationBlock(config)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'trades_df': trades_df,
            'depth_df': depth_df
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ 03...")
        result = block.run(test_data, config)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        norm_trades = result.get('trades_df')
        norm_depth = result.get('depth_df')
        
        print(f"‚úÖ –ë–ª–æ–∫ 03 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   - Trades: {len(norm_trades) if norm_trades is not None else 0} —Å—Ç—Ä–æ–∫")
        print(f"   - Depth: {len(norm_depth) if norm_depth is not None else 0} —Å—Ç—Ä–æ–∫")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
