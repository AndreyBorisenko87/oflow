"""
–ë–ª–æ–∫ 14: –ë—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (Backtest)

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.
"""

import pandas as pd
import logging
from typing import Dict, List, Any
from .base_block import BaseBlock

logger = logging.getLogger(__name__)

class BacktestBlock(BaseBlock):
    """–ë–ª–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, config: Dict):
        super().__init__(config)
        self.name = "BacktestBlock"
    
    def run(self, data: Dict[str, Any], config: Dict) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        detector_events = data.get('detector_events', [])
        
        if not detector_events:
            logger.warning("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return {'backtest_results': None}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±—ç–∫—Ç–µ—Å—Ç
        results = self._run_backtest(detector_events, config)
        
        logger.info(f"–ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        return {'backtest_results': results}
    
    def _run_backtest(self, events: List, config: Dict) -> List[Dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        results = []
        
        for event in events:
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è
            trade_result = self._simulate_trade(event, config)
            if trade_result:
                results.append(trade_result)
        
        return results
    
    def _simulate_trade(self, event: Dict, config: Dict) -> Dict:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
        return {
            'event_id': event.get('id'),
            'pattern_type': event.get('pattern_type'),
            'entry_price': event.get('price'),
            'entry_time': event.get('timestamp'),
            'pnl': 0.0,  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            'status': 'simulated'
        }

class BacktestEngine:
    """–î–≤–∏–∂–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, config: Dict):
        self.config = config
    
    def run(self, data: Dict) -> Dict:
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        block = BacktestBlock(self.config)
        return block.run(data, self.config)

def run_backtest(data: Dict[str, Any], config: Dict) -> Dict[str, Any]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    engine = BacktestEngine(config)
    return engine.run(data)


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ 14 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import pandas as pd
    import logging
    import sys
    import os
    import time
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ base_block
    sys.path.append(os.path.dirname(__file__))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
    
    print("üß™ –¢–ï–°–¢ –ë–õ–û–ö–ê 14: Backtest")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        from pathlib import Path
        events_dir = Path("../../../data/events")
        if not events_dir.exists():
            print("‚ö†Ô∏è  –ü–∞–ø–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
            print("   –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å–æ–±—ã—Ç–∏–π: {events_dir}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
        test_events = [
            {
                'id': 'event_001',
                'pattern_type': 'D1_LiquidityVacuum',
                'price': 4500.0,
                'timestamp': '2025-01-22T10:00:00',
                'exchange': 'binance',
                'confidence': 0.85
            },
            {
                'id': 'event_002',
                'pattern_type': 'D6_BookImbalance',
                'price': 4505.0,
                'timestamp': '2025-01-22T10:05:00',
                'exchange': 'bybit',
                'confidence': 0.72
            }
        ]
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: {len(test_events)} —Å–æ–±—ã—Ç–∏–π")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
        config = {
            'backtest': {
                'initial_capital': 10000.0,
                'position_size': 0.1,
                'stop_loss': 0.02,
                'take_profit': 0.04
            },
            'risk': {
                'max_position_size': 0.2,
                'max_daily_loss': 0.05
            }
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ 14
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ 14: –ë—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        start_time = time.time()
        
        data = {'detector_events': test_events}
        results = run_backtest(data, config)
        
        execution_time = time.time() - start_time
        
        print(f"‚úÖ –ë–ª–æ–∫ 14 –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –±—ç–∫—Ç–µ—Å—Ç–∞:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results and 'backtest_results' in results:
            backtest_results = results['backtest_results']
            if backtest_results:
                print(f"   - –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ —Å–¥–µ–ª–æ–∫: {len(backtest_results)}")
                
                for i, result in enumerate(backtest_results, 1):
                    print(f"   - –°–¥–µ–ª–∫–∞ {i}:")
                    print(f"     –ü–∞—Ç—Ç–µ—Ä–Ω: {result.get('pattern_type', 'N/A')}")
                    print(f"     –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {result.get('entry_price', 'N/A')}")
                    print(f"     –°—Ç–∞—Ç—É—Å: {result.get('status', 'N/A')}")
            else:
                print("   - –°–¥–µ–ª–∫–∏ –Ω–µ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            print("   - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        print("‚úÖ –ë–ª–æ–∫ 14 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
