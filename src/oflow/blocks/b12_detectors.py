"""
–ë–ª–æ–∫ 12: –î–µ—Ç–µ–∫—Ç–æ—Ä—ã
–ú–æ–¥—É–ª—å –ø—Ä–∞–≤–∏–ª (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å) + 8 –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Protocol
from pathlib import Path
import logging
import time

logger = logging.getLogger(__name__)

class BaseDetector(Protocol):
    """–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"""
    
    def detect(self, data: Dict[str, pd.DataFrame]) -> pd.DataFrame:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        ...
    
    def detect_with_progress(self, data: Dict[str, pd.DataFrame]) -> pd.DataFrame:
        """–î–µ—Ç–µ–∫—Ü–∏—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        ...
    
    def get_name(self) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        ...

def run_detectors(
    detectors: List[BaseDetector],
    data: Dict[str, pd.DataFrame],
    output_dir: Path = Path("data/events"),
    use_progress: bool = True
) -> Dict[str, pd.DataFrame]:
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    start_time = time.time()
    logger.info(f"=== –ó–∞–ø—É—Å–∫ {len(detectors)} –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ ===")
    
    results = {}
    total_detectors = len(detectors)
    
    for i, detector in enumerate(detectors, 1):
        logger.info(f"[{i}/{total_detectors}] –ó–∞–ø—É—Å–∫ {detector.get_name()}")
        
        try:
            # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            if use_progress:
                events = detector.detect_with_progress(data)
            else:
                events = detector.detect(data)
            
            if not events.empty:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                output_path = output_dir / f"events_{detector.get_name().lower()}.parquet"
                output_path.parent.mkdir(parents=True, exist_ok=True)
                events.to_parquet(output_path, engine="pyarrow", index=False)
                logger.info(f"‚úì {detector.get_name()}: {len(events)} —Å–æ–±—ã—Ç–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_path}")
            else:
                logger.info(f"‚óã {detector.get_name()}: —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            results[detector.get_name()] = events
            
        except Exception as e:
            logger.error(f"‚úó {detector.get_name()}: –æ—à–∏–±–∫–∞ - {e}")
            results[detector.get_name()] = pd.DataFrame()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_duration = time.time() - start_time
    total_events = sum(len(df) for df in results.values())
    successful_detectors = sum(1 for df in results.values() if not df.empty)
    
    logger.info(f"=== –î–µ—Ç–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
    logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration:.2f}—Å")
    logger.info(f"–£—Å–ø–µ—à–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤: {successful_detectors}/{total_detectors}")
    logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}")
    
    return results

def create_detectors_from_config(config: Dict) -> List[BaseDetector]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    from .detectors import (
        D1LiquidityVacuumBreak,
        D2AbsorptionFlip,
        D3IcebergFade,
        D4StopRunContinuation,
        D5StopRunFailure,
        D6BookImbalance,
        D7SpoofPullTrap,
        D8MomentumIgnition
    )
    
    detectors = []
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ —Å –∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    if 'D1_LiquidityVacuumBreak' in config:
        detectors.append(D1LiquidityVacuumBreak(config['D1_LiquidityVacuumBreak']))
    
    if 'D2_AbsorptionFlip' in config:
        detectors.append(D2AbsorptionFlip(config['D2_AbsorptionFlip']))
    
    if 'D3_IcebergFade' in config:
        detectors.append(D3IcebergFade(config['D3_IcebergFade']))
    
    if 'D4_StopRunContinuation' in config:
        detectors.append(D4StopRunContinuation(config['D4_StopRunContinuation']))
    
    if 'D5_StopRunFailure' in config:
        detectors.append(D5StopRunFailure(config['D5_StopRunFailure']))
    
    if 'D6_BookImbalance' in config:
        detectors.append(D6BookImbalance(config['D6_BookImbalance']))
    
    if 'D7_SpoofPullTrap' in config:
        detectors.append(D7SpoofPullTrap(config['D7_SpoofPullTrap']))
    
    if 'D8_MomentumIgnition' in config:
        detectors.append(D8MomentumIgnition(config['D8_MomentumIgnition']))
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(detectors)} –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤")
    return detectors


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ 12 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import pandas as pd
    import logging
    import sys
    import os
    import time
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ base_block
    sys.path.append(os.path.dirname(__file__))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
    
    print("üß™ –¢–ï–°–¢ –ë–õ–û–ö–ê 12: Detectors")
    print("=" * 50)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–ª–æ–∫–æ–≤
        features_df = pd.read_parquet("../../../data/features/detector_features.parquet")
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤:")
        print(f"   - Features: {len(features_df)} —Å—Ç—Ä–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –±–∏—Ä–∂–∏ —É –Ω–∞—Å –µ—Å—Ç—å
        if not features_df.empty:
            exchanges = features_df['exchange'].unique()
            print(f"   - –ë–∏—Ä–∂–∏ –≤ features: {exchanges}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        config = {
            'D1_LiquidityVacuumBreak': {
                'threshold': 0.1,
                'empty_levels': 3
            },
            'D2_AbsorptionFlip': {
                'min_side_ratio': 0.7,
                'max_price_move_ticks': 2
            },
            'D3_IcebergFade': {
                'same_price_trades': 10,
                'time_window_ms': 2000
            },
            'D4_StopRunContinuation': {
                'min_price_move_percent': 0.3,
                'time_window_ms': 2000
            },
            'D5_StopRunFailure': {
                'reversal_threshold_ratio': 0.7,
                'reversal_window_ms': 5000
            },
            'D6_BookImbalance': {
                'bid_ask_ratio': 3.0,
                'level_wall_multiplier': 5.0
            },
            'D7_SpoofPullTrap': {
                'large_order_multiplier': 5.0,
                'cancel_time_window_ms': 1000
            },
            'D8_MomentumIgnition': {
                'acceleration_window_ms': 3000,
                'min_volume_ratio': 3.0
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        data = {
            'features': features_df
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ 12
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ 12: –î–µ—Ç–µ–∫—Ç–æ—Ä—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã
        detectors = create_detectors_from_config(config)
        print(f"   - –°–æ–∑–¥–∞–Ω–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤: {len(detectors)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã
        results = run_detectors(detectors, data)
        
        execution_time = time.time() - start_time
        
        print(f"‚úÖ –ë–ª–æ–∫ 12 –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_events = sum(len(df) for df in results.values())
        successful_detectors = sum(1 for df in results.values() if not df.empty)
        
        print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤: {successful_detectors}/{len(detectors)}")
        print(f"   - –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}")
        
        for detector_name, events_df in results.items():
            if not events_df.empty:
                print(f"   - {detector_name}: {len(events_df)} —Å–æ–±—ã—Ç–∏–π")
            else:
                print(f"   - {detector_name}: —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print("‚úÖ –ë–ª–æ–∫ 12 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()