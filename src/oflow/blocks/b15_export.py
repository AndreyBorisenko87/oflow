"""
–ë–ª–æ–∫ 15: –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–∑–º–µ—Ç–∫–∏
–í—ã–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π/—Å–¥–µ–ª–æ–∫ –≤ CSV –¥–ª—è TradingView/ATAS
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Any
from pathlib import Path
import logging
from .base_block import BaseBlock

logger = logging.getLogger(__name__)

def export_to_csv(
    data_df: pd.DataFrame,
    output_path: Path,
    format_type: str = "tradingview",
    config: Dict = None
) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    logger.info(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV ({format_type})...")
    
    if data_df.empty:
        logger.warning("‚ö†Ô∏è DataFrame –ø—É—Å—Ç–æ–π, —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_config = config.get('export', {}) if config else {}
        encoding = export_config.get('encoding', 'utf-8')
        separator = export_config.get('separator', ',')
        decimal_separator = export_config.get('decimal_separator', '.')
        date_format = export_config.get('date_format', '%Y-%m-%d %H:%M:%S')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_df = data_df.copy()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–∑–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –∑–∞–ø—è—Ç—É—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if decimal_separator != '.':
            numeric_columns = export_df.select_dtypes(include=[np.number]).columns
            for col in numeric_columns:
                export_df[col] = export_df[col].astype(str).str.replace('.', decimal_separator)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
        export_df.to_csv(
            output_path,
            index=False,
            sep=separator,
            encoding=encoding,
            date_format=date_format,
            float_format='%.6f'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_size_kb = output_path.stat().st_size / 1024
        logger.info(f"‚úÖ CSV —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_path}")
        logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_kb:.1f} KB")
        logger.info(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(export_df)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
        logger.info(f"üî§ –ö–æ–ª–æ–Ω–∫–∏: {', '.join(export_df.columns)}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV: {e}")
        raise

def format_for_tradingview(events_df: pd.DataFrame) -> pd.DataFrame:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è TradingView"""
    logger.info("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è TradingView...")
    
    if events_df.empty:
        return events_df
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è TradingView
    # 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫
    # 2. –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    # 3. –¶–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
    
    # –ó–∞–≥–ª—É—à–∫–∞
    tv_df = events_df.copy()
    tv_df['time'] = pd.to_datetime(tv_df['ts_ns'], unit='ns')
    
    return tv_df

def format_for_atas(events_df: pd.DataFrame, config: Dict = None) -> pd.DataFrame:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ATAS"""
    logger.info("üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ATAS...")
    
    if events_df.empty:
        logger.warning("‚ö†Ô∏è DataFrame –ø—É—Å—Ç–æ–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return events_df
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ATAS
        atas_config = config.get('atas', {}) if config else {}
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        atas_df = events_df.copy()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è ATAS
        atas_df['time'] = pd.to_datetime(atas_df['ts_ns'], unit='ns')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è ATAS
        if 'price' in atas_df.columns:
            atas_df['open'] = atas_df['price']
            atas_df['high'] = atas_df['price']
            atas_df['low'] = atas_df['price']
            atas_df['close'] = atas_df['price']
        
        if 'size' in atas_df.columns:
            atas_df['volume'] = atas_df['size']
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è ATAS
        atas_columns = ['time', 'open', 'high', 'low', 'close', 'volume']
        available_columns = [col for col in atas_columns if col in atas_df.columns]
        
        atas_df = atas_df[available_columns]
        
        logger.info(f"‚úÖ ATAS —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(atas_df)} —Å—Ç—Ä–æ–∫")
        return atas_df
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è ATAS: {e}")
        raise

# ---------- –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–ª–æ–∫–∞ ----------
class ExportBlock(BaseBlock):
    """–ë–ª–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    
    def __init__(self, config: Dict):
        super().__init__(config)
        self.output_dir = config.get('output_dir', 'data/export')
        self.formats = config.get('formats', ['csv', 'tradingview', 'atas'])
        self.encoding = config.get('encoding', 'utf-8')
        self.separator = config.get('separator', ',')
        
    def validate_data(self, data: Dict[str, Any], config: Dict) -> bool:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        if not super().validate_data(data, config):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        if not data:
            self.logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω DataFrame
        has_dataframes = any(
            isinstance(value, pd.DataFrame) and not value.empty 
            for value in data.values()
        )
        
        if not has_dataframes:
            self.logger.error("–ù–µ—Ç –Ω–µ–ø—É—Å—Ç—ã—Ö DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return False
        
        self.logger.info("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return True
    
    def run(self, data: Dict[str, Any], config: Dict) -> Dict[str, str]:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        self.logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(self.formats)}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        output_path = Path(self.output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        
        export_results = {}
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        for data_key, data_value in data.items():
            if not isinstance(data_value, pd.DataFrame) or data_value.empty:
                continue
            
            self.logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç {data_key}: {len(data_value)} —Å—Ç—Ä–æ–∫")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            if 'csv' in self.formats:
                csv_path = output_path / f"{data_key}.csv"
                try:
                    export_to_csv(data_value, csv_path, "standard", config)
                    export_results[f"{data_key}_csv"] = str(csv_path)
                    self.logger.info(f"CSV —ç–∫—Å–ø–æ—Ä—Ç {data_key} –∑–∞–≤–µ—Ä—à–µ–Ω")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞ {data_key}: {e}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è TradingView
            if 'tradingview' in self.formats:
                tv_df = format_for_tradingview(data_value)
                if not tv_df.empty:
                    tv_path = output_path / f"{data_key}_tradingview.csv"
                    try:
                        export_to_csv(tv_df, tv_path, "tradingview", config)
                        export_results[f"{data_key}_tradingview"] = str(tv_path)
                        self.logger.info(f"TradingView —ç–∫—Å–ø–æ—Ä—Ç {data_key} –∑–∞–≤–µ—Ä—à–µ–Ω")
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ TradingView —ç–∫—Å–ø–æ—Ä—Ç–∞ {data_key}: {e}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è ATAS
            if 'atas' in self.formats:
                atas_df = format_for_atas(data_value, config)
                if not atas_df.empty:
                    atas_path = output_path / f"{data_key}_atas.csv"
                    try:
                        export_to_csv(atas_df, atas_path, "atas", config)
                        export_results[f"{data_key}_atas"] = str(atas_path)
                        self.logger.info(f"ATAS —ç–∫—Å–ø–æ—Ä—Ç {data_key} –∑–∞–≤–µ—Ä—à–µ–Ω")
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ ATAS —ç–∫—Å–ø–æ—Ä—Ç–∞ {data_key}: {e}")
        
        self.logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(export_results)}")
        return export_results

# ---------- —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ----------
def export_data(data: Dict[str, pd.DataFrame], config: Dict) -> Dict[str, str]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    block = ExportBlock(config)
    return block.run_with_progress(data, config)


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ 15 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import pandas as pd
    import logging
    import sys
    import os
    import time
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ base_block
    sys.path.append(os.path.dirname(__file__))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
    
    print("üß™ –¢–ï–°–¢ –ë–õ–û–ö–ê 15: Export")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        test_data = {
            'events': pd.DataFrame({
                'ts_ns': [1755774000000000000, 1755774001000000000, 1755774002000000000],
                'exchange': ['binance', 'bybit', 'okx'],
                'pattern_type': ['D1_LiquidityVacuum', 'D6_BookImbalance', 'D2_AbsorptionFlip'],
                'price': [4500.0, 4505.0, 4510.0],
                'confidence': [0.85, 0.72, 0.91]
            }),
            'trades': pd.DataFrame({
                'ts_ns': [1755774000000000000, 1755774001000000000],
                'exchange': ['binance', 'bybit'],
                'side': ['buy', 'sell'],
                'price': [4500.0, 4505.0],
                'size': [1.5, 2.0]
            })
        }
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:")
        for key, df in test_data.items():
            print(f"   - {key}: {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        config = {
            'output_dir': 'data/export',
            'formats': ['csv', 'tradingview', 'atas'],
            'encoding': 'utf-8',
            'separator': ',',
            'export': {
                'decimal_separator': '.',
                'date_format': '%Y-%m-%d %H:%M:%S'
            }
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ 15
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ 15: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
        start_time = time.time()
        
        results = export_data(test_data, config)
        
        execution_time = time.time() - start_time
        
        print(f"‚úÖ –ë–ª–æ–∫ 15 –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results:
            print(f"   - –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")
            
            for export_key, file_path in results.items():
                print(f"   - {export_key}: {file_path}")
        else:
            print("   - –§–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        print("‚úÖ –ë–ª–æ–∫ 15 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()