"""
–ë–ª–æ–∫ 14: –ë—ç–∫—Ç–µ—Å—Ç
–ü—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥/—Å—Ç–æ–ø/—Ü–µ–ª—å –∏ —Å–≤–æ–¥–∫–∞ –º–µ—Ç—Ä–∏–∫
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

class BacktestEngine:
    """–î–≤–∏–∂–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.strategy_config = config.get('strategy', {})
        self.risk_config = config.get('risk_management', {})
        self.position_config = config.get('position_sizing', {})
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.entry_rules = self.strategy_config.get('entry_rules', {})
        self.exit_rules = self.strategy_config.get('exit_rules', {})
        self.stop_loss = self.risk_config.get('stop_loss_pct', 2.0)
        self.take_profit = self.risk_config.get('take_profit_pct', 4.0)
        self.max_position_size = self.position_config.get('max_size', 1.0)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–∞
        self.current_position = 0.0
        self.entry_price = 0.0
        self.entry_time = None
        self.trades_history = []
        
        logger.info(f"–ë—ç–∫—Ç–µ—Å—Ç –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: SL={self.stop_loss}%, TP={self.take_profit}%")
        
    def run_backtest(self, events_df: pd.DataFrame, quotes_df: pd.DataFrame) -> pd.DataFrame:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
        
        if events_df.empty:
            logger.warning("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞")
            return pd.DataFrame()
        
        if quotes_df.empty:
            logger.warning("–ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞")
            return pd.DataFrame()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        events_df = events_df.sort_values('ts_ns').reset_index(drop=True)
        quotes_df = quotes_df.sort_values('ts_ns').reset_index(drop=True)
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(events_df)} —Å–æ–±—ã—Ç–∏–π –∏ {len(quotes_df)} –∫–æ—Ç–∏—Ä–æ–≤–æ–∫")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∞
        for idx, event in events_df.iterrows():
            if idx % 100 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100 —Å–æ–±—ã—Ç–∏–π
                logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –±—ç–∫—Ç–µ—Å—Ç–∞: {idx+1}/{len(events_df)} —Å–æ–±—ã—Ç–∏–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = self._get_current_price(quotes_df, event['ts_ns'])
            if current_price is None:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
            if self.current_position == 0:
                # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥
                if self._should_enter(event, current_price):
                    self._enter_position(event, current_price)
            else:
                # –ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥
                if self._should_exit(event, current_price):
                    self._exit_position(event, current_price)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ
        if self.current_position != 0:
            self._force_close_position(events_df.iloc[-1], quotes_df.iloc[-1])
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        trades_df = pd.DataFrame(self.trades_history)
        
        if not trades_df.empty:
            logger.info(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(trades_df)} —Å–¥–µ–ª–æ–∫")
            logger.info(f"–û–±—â–∏–π P&L: {trades_df['pnl'].sum():.2f}")
        else:
            logger.warning("‚ö†Ô∏è –ë—ç–∫—Ç–µ—Å—Ç –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        return trades_df
    
    def _get_current_price(self, quotes_df: pd.DataFrame, timestamp: int) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        time_diff = abs(quotes_df['ts_ns'] - timestamp)
        if time_diff.empty:
            return None
        
        closest_idx = time_diff.idxmin()
        return quotes_df.loc[closest_idx, 'mid']
    
    def _should_enter(self, event: pd.Series, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é"""
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞
        if 'confidence' in event and event['confidence'] < 0.7:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        pattern_type = event.get('pattern_type', '')
        if pattern_type in ['liquidity_vacuum_break', 'iceberg_fade']:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞
        if 'volume_ratio' in event and event['volume_ratio'] < 2.0:
            return False
        
        return True
    
    def _should_exit(self, event: pd.Series, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        if self.current_position == 0:
            return False
        
        # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ P&L
        if self.current_position > 0:  # Long –ø–æ–∑–∏—Ü–∏—è
            pnl_pct = (current_price - self.entry_price) / self.entry_price * 100
        else:  # Short –ø–æ–∑–∏—Ü–∏—è
            pnl_pct = (self.entry_price - current_price) / self.entry_price * 100
        
        # Stop Loss
        if pnl_pct <= -self.stop_loss:
            logger.info(f"üî¥ Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª: {pnl_pct:.2f}%")
            return True
        
        # Take Profit
        if pnl_pct >= self.take_profit:
            logger.info(f"üü¢ Take Profit —Å—Ä–∞–±–æ—Ç–∞–ª: {pnl_pct:.2f}%")
            return True
        
        # –í—ã—Ö–æ–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ)
        if self.entry_time and 'ts_ns' in event:
            time_in_trade = (event['ts_ns'] - self.entry_time) / 1e9  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            if time_in_trade > 300:  # 5 –º–∏–Ω—É—Ç
                logger.info(f"‚è∞ –í—ã—Ö–æ–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {time_in_trade:.0f}—Å")
                return True
        
        return False
    
    def _enter_position(self, event: pd.Series, current_price: float):
        """–í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        if event.get('pattern_type') in ['liquidity_vacuum_break']:
            position_size = self.max_position_size
        else:
            position_size = self.max_position_size * 0.5
        
        self.current_position = position_size
        self.entry_price = current_price
        self.entry_time = event['ts_ns']
        
        logger.info(f"üìà –í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é: {position_size} @ {current_price:.4f}")
    
    def _exit_position(self, event: pd.Series, current_price: float):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        if self.current_position == 0:
            return
        
        # –†–∞—Å—á–µ—Ç P&L
        if self.current_position > 0:  # Long –ø–æ–∑–∏—Ü–∏—è
            pnl = (current_price - self.entry_price) * self.current_position
            pnl_pct = (current_price - self.entry_price) / self.entry_price * 100
        else:  # Short –ø–æ–∑–∏—Ü–∏—è
            pnl = (self.entry_price - current_price) * abs(self.current_position)
            pnl_pct = (self.entry_price - current_price) / self.entry_price * 100
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
        trade = {
            'entry_time': pd.to_datetime(self.entry_time, unit='ns'),
            'exit_time': pd.to_datetime(event['ts_ns'], unit='ns'),
            'entry_price': self.entry_price,
            'exit_price': current_price,
            'position_size': self.current_position,
            'pnl': pnl,
            'pnl_pct': pnl_pct,
            'pattern_type': event.get('pattern_type', ''),
            'confidence': event.get('confidence', 0.0),
            'exchange': event.get('exchange', ''),
            'duration_seconds': (event['ts_ns'] - self.entry_time) / 1e9
        }
        
        self.trades_history.append(trade)
        
        logger.info(f"üìâ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: P&L = {pnl:.4f} ({pnl_pct:.2f}%)")
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_position = 0.0
        self.entry_price = 0.0
        self.entry_time = None
    
    def _force_close_position(self, event: pd.Series, quote: pd.Series):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ü–µ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        if self.current_position == 0:
            return
        
        current_price = quote.get('mid', self.entry_price)
        self._exit_position(event, current_price)
    
    def calculate_metrics(self, trades_df: pd.DataFrame) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        logger.info("üìä –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –±—ç–∫—Ç–µ—Å—Ç–∞...")
        
        if trades_df.empty:
            return {
                "total_return": 0.0, "sharpe_ratio": 0.0, "max_drawdown": 0.0,
                "win_rate": 0.0, "profit_factor": 0.0, "avg_trade": 0.0,
                "total_trades": 0, "winning_trades": 0, "losing_trades": 0
            }
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_return = trades_df['pnl'].sum()
        total_trades = len(trades_df)
        winning_trades = len(trades_df[trades_df['pnl'] > 0])
        losing_trades = len(trades_df[trades_df['pnl'] < 0])
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        win_rate = winning_trades / total_trades if total_trades > 0 else 0.0
        
        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
        avg_trade = trades_df['pnl'].mean()
        
        # Profit Factor
        gross_profit = trades_df[trades_df['pnl'] > 0]['pnl'].sum()
        gross_loss = abs(trades_df[trades_df['pnl'] < 0]['pnl'].sum())
        profit_factor = gross_profit / gross_loss if gross_loss > 0 else float('inf')
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        returns = trades_df['pnl_pct'] / 100
        sharpe_ratio = returns.mean() / (returns.std() + 1e-8) * np.sqrt(252)  # –ì–æ–¥–æ–≤–æ–π
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        cumulative_pnl = trades_df['pnl'].cumsum()
        running_max = cumulative_pnl.expanding().max()
        drawdown = (cumulative_pnl - running_max) / (running_max + 1e-8) * 100
        max_drawdown = abs(drawdown.min())
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        avg_win = trades_df[trades_df['pnl'] > 0]['pnl'].mean() if winning_trades > 0 else 0.0
        avg_loss = trades_df[trades_df['pnl'] < 0]['pnl'].mean() if losing_trades > 0 else 0.0
        
        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏
        avg_duration = trades_df['duration_seconds'].mean() if 'duration_seconds' in trades_df.columns else 0.0
        
        metrics = {
            "total_return": total_return,
            "total_return_pct": trades_df['pnl_pct'].sum(),
            "sharpe_ratio": sharpe_ratio,
            "max_drawdown": max_drawdown,
            "win_rate": win_rate,
            "profit_factor": profit_factor,
            "avg_trade": avg_trade,
            "avg_win": avg_win,
            "avg_loss": avg_loss,
            "total_trades": total_trades,
            "winning_trades": winning_trades,
            "losing_trades": losing_trades,
            "avg_duration": avg_duration
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        logger.info("=== –ú–ï–¢–†–ò–ö–ò –ë–≠–ö–¢–ï–°–¢–ê ===")
        logger.info(f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_return:.4f} ({trades_df['pnl_pct'].sum():.2f}%)")
        logger.info(f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        logger.info(f"‚úÖ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {winning_trades} ({win_rate*100:.1f}%)")
        logger.info(f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: {losing_trades}")
        logger.info(f"üìä Profit Factor: {profit_factor:.2f}")
        logger.info(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%")
        logger.info(f"üéØ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {sharpe_ratio:.2f}")
        
        return metrics

def generate_report(
    trades_df: pd.DataFrame,
    metrics: Dict[str, float],
    output_dir: Path = Path("data/backtest")
) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –±—ç–∫—Ç–µ—Å—Ç–∞...")
    
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –≤ parquet
    if not trades_df.empty:
        trades_path = output_dir / "backtest_trades.parquet"
        trades_df.to_parquet(trades_path, engine="pyarrow", index=False)
        logger.info(f"‚úÖ –°–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {trades_path}")
        
        # 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –≤ CSV –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        csv_path = output_dir / "backtest_trades.csv"
        trades_df.to_csv(csv_path, index=False)
        logger.info(f"‚úÖ CSV –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {csv_path}")
    
    # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ JSON
    metrics_path = output_dir / "backtest_metrics.json"
    import json
    with open(metrics_path, 'w', encoding='utf-8') as f:
        json.dump(metrics, f, indent=2, default=str, ensure_ascii=False)
    logger.info(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metrics_path}")
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    summary_path = output_dir / "backtest_summary.txt"
    with open(summary_path, 'w', encoding='utf-8') as f:
        f.write("=== –û–¢–ß–ï–¢ –ë–≠–ö–¢–ï–°–¢–ê ===\n\n")
        f.write(f"–î–∞—Ç–∞: {pd.Timestamp.now()}\n")
        f.write(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {metrics.get('total_trades', 0)}\n")
        f.write(f"–í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {metrics.get('winning_trades', 0)}\n")
        f.write(f"–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: {metrics.get('losing_trades', 0)}\n")
        f.write(f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {metrics.get('win_rate', 0)*100:.1f}%\n\n")
        
        f.write("=== –ú–ï–¢–†–ò–ö–ò ===\n")
        f.write(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {metrics.get('total_return', 0):.4f}\n")
        f.write(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥ (%): {metrics.get('total_return_pct', 0):.2f}%\n")
        f.write(f"Profit Factor: {metrics.get('profit_factor', 0):.2f}\n")
        f.write(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {metrics.get('sharpe_ratio', 0):.2f}\n")
        f.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics.get('max_drawdown', 0):.2f}%\n")
        f.write(f"–°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {metrics.get('avg_trade', 0):.4f}\n")
        f.write(f"–°—Ä–µ–¥–Ω—è—è –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è: {metrics.get('avg_win', 0):.4f}\n")
        f.write(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è: {metrics.get('avg_loss', 0):.4f}\n")
        f.write(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {metrics.get('avg_duration', 0):.1f}—Å\n")
    
    logger.info(f"‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {summary_path}")
    logger.info(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

def run_backtest(
    events_df: pd.DataFrame,
    quotes_df: pd.DataFrame,
    config: Dict,
    output_dir: Path = Path("data/backtest")
) -> Tuple[pd.DataFrame, Dict[str, float]]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    try:
        # 1. –°–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞...")
        engine = BacktestEngine(config)
        
        # 2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±—ç–∫—Ç–µ—Å—Ç
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞...")
        trades_df = engine.run_backtest(events_df, quotes_df)
        
        if trades_df.empty:
            logger.warning("‚ö†Ô∏è –ë—ç–∫—Ç–µ—Å—Ç –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics = engine.calculate_metrics(trades_df)
        else:
            # 3. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            logger.info("–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –±—ç–∫—Ç–µ—Å—Ç–∞...")
            metrics = engine.calculate_metrics(trades_df)
        
        # 4. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
        generate_report(trades_df, metrics, output_dir)
        
        # 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("=== –ò–¢–û–ì–ò –ë–≠–ö–¢–ï–°–¢–ê ===")
        if not trades_df.empty:
            logger.info(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades_df)}")
            logger.info(f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {metrics.get('total_return', 0):.4f}")
            logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {metrics.get('win_rate', 0)*100:.1f}%")
            logger.info(f"üéØ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {metrics.get('sharpe_ratio', 0):.2f}")
            logger.info(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics.get('max_drawdown', 0):.2f}%")
        else:
            logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
        
        logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise
    
    return trades_df, metrics
