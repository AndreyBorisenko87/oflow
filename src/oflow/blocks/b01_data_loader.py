"""
–ë–ª–æ–∫ 01: –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö (DataLoader)

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º
–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤.
"""

import logging
import yaml
from pathlib import Path
from typing import Dict, List, Any
try:
    from .base_block import BaseBlock
except ImportError:
    # –î–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    from base_block import BaseBlock

logger = logging.getLogger(__name__)

class DataLoaderBlock(BaseBlock):
    """–ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, config: Dict):
        super().__init__(config)
        self.name = "DataLoaderBlock"
    
    def run(self, data: Dict[str, Any], config: Dict) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_data = self._load_config(config)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º
        data_paths = self._resolve_data_paths(config_data)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        validated_data = self._validate_data_paths(data_paths)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = {
            'config': config_data,
            'data_paths': validated_data,
            'start_time': data.get('start_time'),
            'end_time': data.get('end_time')
        }
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(validated_data)} –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º")
        return result
    
    def _load_config(self, config: Dict) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_dir = config.get('config_dir', 'configs')
        config_path = Path(config_dir) / 'config.yaml'
        sources_path = Path(config_dir) / 'sources.yaml'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_path, 'r', encoding='utf-8') as f:
            main_config = yaml.safe_load(f)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        with open(sources_path, 'r', encoding='utf-8') as f:
            sources = yaml.safe_load(f)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        main_config['sources'] = sources
        return main_config
    
    def _resolve_data_paths(self, config: Dict) -> List[str]:
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º"""
        sources = config.get('sources', {})
        data_paths = []
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {list(sources.keys())}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        for exchange, exchange_data in sources.items():
            if not isinstance(exchange_data, dict):
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {exchange}: –Ω–µ —Å–ª–æ–≤–∞—Ä—å")
                continue
                
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {exchange}: {list(exchange_data.keys())}")
            
            for market, market_data in exchange_data.items():
                if not isinstance(market_data, dict):
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {exchange}.{market}: –Ω–µ —Å–ª–æ–≤–∞—Ä—å")
                    continue
                    
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {exchange}.{market}: {list(market_data.keys())}")
                
                for data_type, file_path in market_data.items():
                    if isinstance(file_path, str):
                        data_paths.append(file_path)
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å: {exchange}.{market}.{data_type} -> {file_path}")
                    else:
                        logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {exchange}.{market}.{data_type}: –Ω–µ —Å—Ç—Ä–æ–∫–∞")
        
        logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—É—Ç–µ–π: {len(data_paths)}")
        return data_paths
    
    def _validate_data_paths(self, data_paths: List[str]) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º"""
        validated_paths = []
        
        for path in data_paths:
            if Path(path).exists():
                validated_paths.append(path)
            else:
                logger.warning(f"–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        
        return validated_paths

def run_data_loader(data: Dict[str, Any], config: Dict) -> Dict[str, Any]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–ª–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    block = DataLoaderBlock(config)
    return block.run_with_progress(data, config)


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ 01 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import sys
    import os
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ base_block
    sys.path.append(os.path.dirname(__file__))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
    
    print("üß™ –¢–ï–°–¢ –ë–õ–û–ö–ê 01: DataLoader")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫
        config = {'config_dir': '../../../configs'}
        block = DataLoaderBlock(config)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ 01...")
        result = block.run(test_data, config)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        data_paths = result.get('data_paths', [])
        print(f"‚úÖ –ë–ª–æ–∫ 01 –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º: {len(data_paths)}")
        
        if data_paths:
            print("üìÅ –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º:")
            for i, path in enumerate(data_paths[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   {i}. {path}")
            if len(data_paths) > 5:
                print(f"   ... –∏ –µ—â–µ {len(data_paths) - 5} –ø—É—Ç–µ–π")
        
        print("‚úÖ –ë–ª–æ–∫ 01 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
