"""
–ë–ª–æ–∫ 15: –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–∑–º–µ—Ç–∫–∏
–í—ã–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π/—Å–¥–µ–ª–æ–∫ –≤ CSV –¥–ª—è TradingView/ATAS
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

def export_to_csv(
    data_df: pd.DataFrame,
    output_path: Path,
    format_type: str = "tradingview",
    config: Dict = None
) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    logger.info(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV ({format_type})...")
    
    if data_df.empty:
        logger.warning("‚ö†Ô∏è DataFrame –ø—É—Å—Ç–æ–π, —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_config = config.get('export', {}) if config else {}
        encoding = export_config.get('encoding', 'utf-8')
        separator = export_config.get('separator', ',')
        decimal_separator = export_config.get('decimal_separator', '.')
        date_format = export_config.get('date_format', '%Y-%m-%d %H:%M:%S')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_df = data_df.copy()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–∑–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –∑–∞–ø—è—Ç—É—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if decimal_separator != '.':
            numeric_columns = export_df.select_dtypes(include=[np.number]).columns
            for col in numeric_columns:
                export_df[col] = export_df[col].astype(str).str.replace('.', decimal_separator)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
        export_df.to_csv(
            output_path,
            index=False,
            sep=separator,
            encoding=encoding,
            date_format=date_format,
            float_format='%.6f'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_size_kb = output_path.stat().st_size / 1024
        logger.info(f"‚úÖ CSV —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_path}")
        logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_kb:.1f} KB")
        logger.info(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(export_df)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
        logger.info(f"üî§ –ö–æ–ª–æ–Ω–∫–∏: {', '.join(export_df.columns)}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV: {e}")
        raise

def format_for_tradingview(events_df: pd.DataFrame) -> pd.DataFrame:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è TradingView"""
    logger.info("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è TradingView...")
    
    if events_df.empty:
        return events_df
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è TradingView
    # 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫
    # 2. –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    # 3. –¶–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
    
    # –ó–∞–≥–ª—É—à–∫–∞
    tv_df = events_df.copy()
    tv_df['time'] = pd.to_datetime(tv_df['ts_ns'], unit='ns')
    
    return tv_df

def format_for_atas(events_df: pd.DataFrame, config: Dict = None) -> pd.DataFrame:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ATAS"""
    logger.info("üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ATAS...")
    
    if events_df.empty:
        logger.warning("‚ö†Ô∏è DataFrame –ø—É—Å—Ç–æ–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return events_df
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ATAS
        atas_config = config.get('atas', {}) if config else {}
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        atas_df = events_df.copy()
        
        # 1. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è ATAS
        if 'ts_ns' in atas_df.columns:
            atas_df['DateTime'] = pd.to_datetime(atas_df['ts_ns'], unit='ns')
            atas_df['Date'] = atas_df['DateTime'].dt.strftime('%m/%d/%Y')
            atas_df['Time'] = atas_df['DateTime'].dt.strftime('%H:%M:%S')
        
        # 2. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        if 'price_level' in atas_df.columns:
            atas_df['Price'] = atas_df['price_level'].round(6)
        elif 'mid' in atas_df.columns:
            atas_df['Price'] = atas_df['mid'].round(6)
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–∫ ATAS
        atas_df['Marker'] = atas_df.apply(_create_atas_marker, axis=1)
        
        # 4. –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ ATAS
        atas_df['Color'] = atas_df.apply(_create_atas_color, axis=1)
        
        # 5. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if 'pattern_type' in atas_df.columns:
            atas_df['Pattern'] = atas_df['pattern_type'].str.upper()
            atas_df['PatternCode'] = atas_df['pattern_type'].str[:3].str.upper()
        
        # 6. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if 'confidence' in atas_df.columns:
            atas_df['Confidence'] = atas_df['confidence'].round(3)
            atas_df['ConfidenceLevel'] = atas_df['confidence'].apply(
                lambda x: 'HIGH' if x >= 0.8 else 'MEDIUM' if x >= 0.6 else 'LOW'
            )
        
        # 7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è ATAS
        if 'volume_ratio' in atas_df.columns:
            atas_df['VolumeRatio'] = atas_df['volume_ratio'].round(2)
        
        if 'exchange' in atas_df.columns:
            atas_df['Exchange'] = atas_df['exchange'].str.upper()
        
        # 8. –í—ã–±–æ—Ä –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è ATAS
        atas_columns = {
            'Date': 'Date',
            'Time': 'Time',
            'Price': 'Price',
            'Marker': 'Marker',
            'Color': 'Color',
            'Pattern': 'Pattern',
            'Confidence': 'Confidence',
            'VolumeRatio': 'VolumeRatio',
            'Exchange': 'Exchange'
        }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        existing_columns = {k: v for k, v in atas_columns.items() if k in atas_df.columns}
        atas_df = atas_df[list(existing_columns.keys())].rename(columns=existing_columns)
        
        # 9. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if 'Date' in atas_df.columns and 'Time' in atas_df.columns:
            atas_df = atas_df.sort_values(['Date', 'Time']).reset_index(drop=True)
        
        logger.info(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ATAS –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(atas_df)} —Å—Ç—Ä–æ–∫")
        logger.info(f"üî§ –ö–æ–ª–æ–Ω–∫–∏: {', '.join(atas_df.columns)}")
        
        return atas_df
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è ATAS: {e}")
        raise

def _create_tv_marker(row: pd.Series) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è TradingView"""
    try:
        pattern = row.get('pattern_type', '').upper()
        confidence = row.get('confidence', 0.0)
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–∫–∏ –ø–æ —Ç–∏–ø—É –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if 'liquidity_vacuum_break' in pattern:
            base_marker = 'LVB'
        elif 'iceberg_fade' in pattern:
            base_marker = 'ICB'
        elif 'stop_run' in pattern:
            base_marker = 'STP'
        elif 'momentum' in pattern:
            base_marker = 'MOM'
        else:
            base_marker = 'PTN'
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence >= 0.8:
            strength = 'S'
        elif confidence >= 0.6:
            strength = 'M'
        else:
            strength = 'W'
        
        return f"{base_marker}_{strength}"
        
    except Exception:
        return "PTN_M"

def _create_atas_marker(row: pd.Series) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è ATAS"""
    try:
        pattern = row.get('pattern_type', '').upper()
        confidence = row.get('confidence', 0.0)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è ATAS
        if 'liquidity_vacuum_break' in pattern:
            if confidence >= 0.8:
                return 'LVB_HIGH'
            elif confidence >= 0.6:
                return 'LVB_MED'
            else:
                return 'LVB_LOW'
        elif 'iceberg_fade' in pattern:
            if confidence >= 0.8:
                return 'ICB_HIGH'
            elif confidence >= 0.6:
                return 'ICB_MED'
            else:
                return 'ICB_LOW'
        elif 'stop_run' in pattern:
            if confidence >= 0.8:
                return 'STP_HIGH'
            elif confidence >= 0.6:
                return 'STP_MED'
            else:
                return 'STP_LOW'
        elif 'momentum' in pattern:
            if confidence >= 0.8:
                return 'MOM_HIGH'
            elif confidence >= 0.6:
                return 'MOM_MED'
            else:
                return 'MOM_LOW'
        else:
            return 'PATTERN'
            
    except Exception:
        return "PATTERN"

def _create_atas_color(row: pd.Series) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è ATAS"""
    try:
        pattern = row.get('pattern_type', '')
        confidence = row.get('confidence', 0.0)
        
        # –¶–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø—É –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if 'liquidity_vacuum_break' in pattern:
            base_color = 'RED'
        elif 'iceberg_fade' in pattern:
            base_color = 'BLUE'
        elif 'stop_run' in pattern:
            base_color = 'GREEN'
        elif 'momentum' in pattern:
            base_color = 'YELLOW'
        else:
            base_color = 'WHITE'
        
        # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence >= 0.8:
            intensity = 'BRIGHT'
        elif confidence >= 0.6:
            intensity = 'NORMAL'
        else:
            intensity = 'DIM'
        
        return f"{base_color}_{intensity}"
        
    except Exception:
        return "WHITE_NORMAL"

def run_export(
    events_df: pd.DataFrame,
    config: Dict,
    output_dir: Path = Path("data/export")
) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–∞–∑–º–µ—Ç–∫–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–∞–∑–º–µ—Ç–∫–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if events_df.empty:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        logger.info(f"üìä –≠–∫—Å–ø–æ—Ä—Ç {len(events_df)} —Å–æ–±—ã—Ç–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # 1. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è TradingView
        logger.info("üìà –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è TradingView...")
        tv_df = format_for_tradingview(events_df, config)
        if not tv_df.empty:
            tv_path = output_dir / "marks_tradingview.csv"
            export_to_csv(tv_df, tv_path, "tradingview", config)
            logger.info(f"‚úÖ TradingView —ç–∫—Å–ø–æ—Ä—Ç: {tv_path}")
        
        # 2. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è ATAS
        logger.info("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ATAS...")
        atas_df = format_for_atas(events_df, config)
        if not atas_df.empty:
            atas_path = output_dir / "marks_atas.csv"
            export_to_csv(atas_df, atas_path, "atas", config)
            logger.info(f"‚úÖ ATAS —ç–∫—Å–ø–æ—Ä—Ç: {atas_path}")
        
        # 3. –û–±—â–∏–π CSV —ç–∫—Å–ø–æ—Ä—Ç
        logger.info("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—â–µ–≥–æ CSV...")
        general_path = output_dir / "marks_general.csv"
        export_to_csv(events_df, general_path, "general", config)
        logger.info(f"‚úÖ –û–±—â–∏–π CSV —ç–∫—Å–ø–æ—Ä—Ç: {general_path}")
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        _create_export_summary(events_df, output_dir, config)
        
        # 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("=== –ò–¢–û–ì–ò –≠–ö–°–ü–û–†–¢–ê ===")
        logger.info(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(events_df)}")
        
        if 'pattern_type' in events_df.columns:
            pattern_counts = events_df['pattern_type'].value_counts()
            logger.info("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º:")
            for pattern, count in pattern_counts.items():
                logger.info(f"  {pattern}: {count}")
        
        if 'confidence' in events_df.columns:
            avg_confidence = events_df['confidence'].mean()
            logger.info(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}")
        
        if 'exchange' in events_df.columns:
            exchange_counts = events_df['exchange'].value_counts()
            logger.info("üè¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∏—Ä–∂–∞–º:")
            for exchange, count in exchange_counts.items():
                logger.info(f"  {exchange}: {count}")
        
        logger.info(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
        logger.info("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ä–∞–∑–º–µ—Ç–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        raise

def _create_export_summary(events_df: pd.DataFrame, output_dir: Path, config: Dict) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —ç–∫—Å–ø–æ—Ä—Ç—É"""
    try:
        summary_path = output_dir / "export_summary.txt"
        
        with open(summary_path, 'w', encoding='utf-8') as f:
            f.write("=== –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –≠–ö–°–ü–û–†–¢–£ ===\n\n")
            f.write(f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {pd.Timestamp.now()}\n")
            f.write(f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(events_df)}\n\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            if 'pattern_type' in events_df.columns:
                f.write("=== –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ü–ê–¢–¢–ï–†–ù–ê–ú ===\n")
                pattern_counts = events_df['pattern_type'].value_counts()
                for pattern, count in pattern_counts.items():
                    percentage = (count / len(events_df)) * 100
                    f.write(f"{pattern}: {count} ({percentage:.1f}%)\n")
                f.write("\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∏—Ä–∂–∞–º
            if 'exchange' in events_df.columns:
                f.write("=== –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ë–ò–†–ñ–ê–ú ===\n")
                exchange_counts = events_df['exchange'].value_counts()
                for exchange, count in exchange_counts.items():
                    percentage = (count / len(events_df)) * 100
                    f.write(f"{exchange}: {count} ({percentage:.1f}%)\n")
                f.write("\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if 'confidence' in events_df.columns:
                f.write("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–í–ï–†–ï–ù–ù–û–°–¢–ò ===\n")
                f.write(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {events_df['confidence'].mean():.3f}\n")
                f.write(f"–ú–µ–¥–∏–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {events_df['confidence'].median():.3f}\n")
                f.write(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {events_df['confidence'].min():.3f}\n")
                f.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {events_df['confidence'].max():.3f}\n")
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                high_conf = len(events_df[events_df['confidence'] >= 0.8])
                med_conf = len(events_df[(events_df['confidence'] >= 0.6) & (events_df['confidence'] < 0.8)])
                low_conf = len(events_df[events_df['confidence'] < 0.6])
                
                f.write(f"–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (‚â•0.8): {high_conf} ({high_conf/len(events_df)*100:.1f}%)\n")
                f.write(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0.6-0.8): {med_conf} ({med_conf/len(events_df)*100:.1f}%)\n")
                f.write(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (<0.6): {low_conf} ({low_conf/len(events_df)*100:.1f}%)\n")
                f.write("\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä–µ–º—É
            if 'volume_ratio' in events_df.columns:
                f.write("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –û–ë–™–ï–ú–£ ===\n")
                f.write(f"–°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: {events_df['volume_ratio'].mean():.2f}\n")
                f.write(f"–ú–µ–¥–∏–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: {events_df['volume_ratio'].median():.2f}\n")
                f.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: {events_df['volume_ratio'].max():.2f}\n")
                f.write("\n")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            if 'ts_ns' in events_df.columns:
                f.write("=== –í–†–ï–ú–ï–ù–ù–û–ô –î–ò–ê–ü–ê–ó–û–ù ===\n")
                start_time = pd.to_datetime(events_df['ts_ns'].min(), unit='ns')
                end_time = pd.to_datetime(events_df['ts_ns'].max(), unit='ns')
                f.write(f"–ù–∞—á–∞–ª–æ: {start_time}\n")
                f.write(f"–ö–æ–Ω–µ—Ü: {end_time}\n")
                f.write(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {end_time - start_time}\n")
                f.write("\n")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
            f.write("=== –≠–ö–°–ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–ï –§–ê–ô–õ–´ ===\n")
            f.write("marks_tradingview.csv - –î–∞–Ω–Ω—ã–µ –¥–ª—è TradingView\n")
            f.write("marks_atas.csv - –î–∞–Ω–Ω—ã–µ –¥–ª—è ATAS\n")
            f.write("marks_general.csv - –û–±—â–∏–π CSV —ç–∫—Å–ø–æ—Ä—Ç\n")
            f.write("export_summary.txt - –≠—Ç–æ—Ç –æ—Ç—á–µ—Ç\n")
        
        logger.info(f"‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {summary_path}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞
