#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–µ–Ω—å—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–£–º–µ–Ω—å—à–∞–µ—Ç –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤
"""

import pandas as pd
import numpy as np
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

def create_small_trades_data(input_file: str, output_file: str, max_records: int = 5000):
    """–°–æ–∑–¥–∞–µ—Ç —É–º–µ–Ω—å—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é trades –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —É–º–µ–Ω—å—à–µ–Ω–Ω—ã—Ö trades –¥–∞–Ω–Ω—ã—Ö: {max_records} –∑–∞–ø–∏—Å–µ–π")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    trades_df = pd.read_parquet(input_file)
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(trades_df)} –∏—Å—Ö–æ–¥–Ω—ã—Ö trades –∑–∞–ø–∏—Å–µ–π")
    
    if len(trades_df) <= max_records:
        logger.info("–î–∞–Ω–Ω—ã–µ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–ª—ã, –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å")
        trades_df.to_parquet(output_file, index=False)
        return
    
    # –°–æ–∑–¥–∞–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    # –ë–µ—Ä–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–∏—Ä–∂–∞–º
    small_trades = []
    
    for exchange in trades_df['exchange'].unique():
        ex_data = trades_df[trades_df['exchange'] == exchange]
        target_count = max(1, int(max_records * len(ex_data) / len(trades_df)))
        
        # –ë–µ—Ä–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        step = max(1, len(ex_data) // target_count)
        selected_indices = range(0, len(ex_data), step)[:target_count]
        
        small_trades.append(ex_data.iloc[selected_indices])
        logger.info(f"  {exchange}: {len(ex_data)} -> {len(selected_indices)} –∑–∞–ø–∏—Å–µ–π")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    small_df = pd.concat(small_trades, ignore_index=True)
    small_df = small_df.sort_values('ts_ns').reset_index(drop=True)
    
    small_df.to_parquet(output_file, index=False)
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(small_df)} trades –∑–∞–ø–∏—Å–µ–π –≤ {output_file}")

def create_small_depth_data(input_file: str, output_file: str, max_records: int = 10000):
    """–°–æ–∑–¥–∞–µ—Ç —É–º–µ–Ω—å—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é depth –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —É–º–µ–Ω—å—à–µ–Ω–Ω—ã—Ö depth –¥–∞–Ω–Ω—ã—Ö: {max_records} –∑–∞–ø–∏—Å–µ–π")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    depth_df = pd.read_parquet(input_file)
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(depth_df)} –∏—Å—Ö–æ–¥–Ω—ã—Ö depth –∑–∞–ø–∏—Å–µ–π")
    
    if len(depth_df) <= max_records:
        logger.info("–î–∞–Ω–Ω—ã–µ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–ª—ã, –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å")
        depth_df.to_parquet(output_file, index=False)
        return
    
    # –°–æ–∑–¥–∞–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    # –ë–µ—Ä–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–∏—Ä–∂–∞–º
    small_depth = []
    
    for exchange in depth_df['exchange'].unique():
        ex_data = depth_df[depth_df['exchange'] == exchange]
        target_count = max(1, int(max_records * len(ex_data) / len(depth_df)))
        
        # –ë–µ—Ä–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        step = max(1, len(ex_data) // target_count)
        selected_indices = range(0, len(ex_data), step)[:target_count]
        
        small_depth.append(ex_data.iloc[selected_indices])
        logger.info(f"  {exchange}: {len(ex_data)} -> {len(selected_indices)} –∑–∞–ø–∏—Å–µ–π")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    small_df = pd.concat(small_depth, ignore_index=True)
    small_df = small_df.sort_values('ts_ns').reset_index(drop=True)
    
    small_df.to_parquet(output_file, index=False)
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(small_df)} depth –∑–∞–ø–∏—Å–µ–π –≤ {output_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–µ–Ω—å—à–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üöÄ –°–û–ó–î–ê–ù–ò–ï –£–ú–ï–ù–¨–®–ï–ù–ù–´–• –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    logger.info("=" * 60)
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    input_dir = Path("../../../data/normalized")
    output_dir = Path("../../../data/test_small")
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        # Trades –¥–∞–Ω–Ω—ã–µ
        trades_input = input_dir / "trades.parquet"
        trades_output = output_dir / "trades_small.parquet"
        
        if trades_input.exists():
            create_small_trades_data(str(trades_input), str(trades_output), max_records=5000)
        else:
            logger.warning(f"–§–∞–π–ª {trades_input} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Depth –¥–∞–Ω–Ω—ã–µ
        depth_input = input_dir / "book_top.parquet"
        depth_output = output_dir / "book_top_small.parquet"
        
        if depth_input.exists():
            create_small_depth_data(str(depth_input), str(depth_output), max_records=10000)
        else:
            logger.warning(f"–§–∞–π–ª {depth_input} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.info("‚úÖ –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_dir.absolute()}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        for file_path in output_dir.glob("*.parquet"):
            size_mb = file_path.stat().st_size / (1024 * 1024)
            logger.info(f"üìä {file_path.name}: {size_mb:.1f} MB")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–º–µ–Ω—å—à–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
